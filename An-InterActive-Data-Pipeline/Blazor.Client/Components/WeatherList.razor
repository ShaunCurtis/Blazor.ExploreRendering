@using Blazor.Core.Weather
@using Blazor.Core.CQS;
@using Microsoft.AspNetCore.Components.Web.Virtualization
@inject IListRequestHandler<WeatherForecast> ListHandler
@inject IRenderStateService RenderState

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if(this.RenderState.IsPreRender)
{
    <div>Loading...</div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            <Virtualize Context="forecast" ItemsProvider="this.GetRowsAsync">
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            </Virtualize>
        </tbody>
    </table>
}

@code {

    private async ValueTask<ItemsProviderResult<WeatherForecast>> GetRowsAsync(
    ItemsProviderRequest request)
    {
        var result = await ListHandler.Execute(ListRequest.Create(request.StartIndex, request.Count));

        if (result.Successful && result.Items is not null)
            return new ItemsProviderResult<WeatherForecast>(result.Items, result.TotalCount);

        return new ItemsProviderResult<WeatherForecast>(Enumerable.Empty<WeatherForecast>(), 0);
    }
}
